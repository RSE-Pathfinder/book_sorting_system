<?xml version="1.0"?>

<!-- 

# ===================================== COPYRIGHT ===================================== #
#                                                                                       #
#  IFRA (Intelligent Flexible Robotics and Assembly) Group, CRANFIELD UNIVERSITY        #
#  Created on behalf of the IFRA Group at Cranfield University, United Kingdom          #
#  E-mail: IFRA@cranfield.ac.uk                                                         #
#                                                                                       #
#  Licensed under the Apache-2.0 License.                                               #
#  You may not use this file except in compliance with the License.                     #
#  You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0  #
#                                                                                       #
#  Unless required by applicable law or agreed to in writing, software distributed      #
#  under the License is distributed on an "as-is" basis, without warranties or          #
#  conditions of any kind, either express or implied. See the License for the specific  #
#  language governing permissions and limitations under the License.                    #
#                                                                                       #
#  IFRA Group - Cranfield University                                                    #
#  AUTHORS: Mikel Bueno Viso - Mikel.Bueno-Viso@cranfield.ac.uk                         #
#           Seemal Asif      - s.asif@cranfield.ac.uk                                   #
#           Phil Webb        - p.f.webb@cranfield.ac.uk                                 #
#                                                                                       #
#  Date: July, 2022.                                                                    #
#                                                                                       #
# ===================================== COPYRIGHT ===================================== #

# ===================================== COPYRIGHT ===================================== #
#                                                                                       #
#  Some of the information used to build the ROS2 UR10-Robot .urdf files in this ROS2   #
#  repository has been taken from the following resources:                              #
#       - Universal Robots ROS2 Description:                                            #
#         https://github.com/UniversalRobots/Universal_Robots_ROS2_Description          #
#       - Universal Robots ROS2 Gazebo Simulation:                                      #
#         https://github.com/UniversalRobots/Universal_Robots_ROS2_Gazebo_Simulation    #
#                                                                                       #
#  AUTHORS:                                                                             #
#       - ROS-Industrial - https://rosindustrial.org                                    #
#       - Universal Robots - https://github.com/UniversalRobots                         #
#       - Nadia Hammoudeh Garcia, Kelsey Hawkins, G.A. vd. Hoorn, Lovro Ivanov, Mathias #
#         Ludtke, Wim Meeussen, Felix Messmer, Miguel Prada Sarasola, Denis Stogl,      #
#         Andy Zelenak, Marvin Grosse Besselmann.                                       #
#       - Maintainers: Felix Exner (exner@fzi.de), Tristan Schnell (schnell@fzi.de),    #
#         Lovro Ivanov (lovro.ivanov@gmail.com), Denis Stogl (denis@stoglrobotics.de).  #
#                                                                                       #
#  Copyright (c) 2021, Universal Robots A/S                                             #
#  (ORIGINAL LICENSE) -> Licensed under the BSD 3-Clause License.                       #
#                                                                                       #
#  CHANGES MADE:                                                                        #
#  Robot information/specifications have been taken, and the code has been modified and #
#  re-organised in accordance with the ros2_RobotSimulation standards.                  #
#                                                                                       #
# ===================================== COPYRIGHT ===================================== #

# ======= CITE OUR WORK ======= #
# You can cite our work with the following statement:
# IFRA (2022) ROS2.0 ROBOT SIMULATION. URL: https://github.com/IFRA-Cranfield/ros2_RobotSimulation.

-->

<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:macro name="ur10_gazebo" params="prefix">

    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <robot_sim_type>gazebo_ros2_control/GazeboSystem</robot_sim_type>
        <parameters>$(find ur10_ros2_gazebo)/config/ur10_controller.yaml</parameters>
      </plugin>
    </gazebo>
    
    <ros2_control name="GazeboSystem" type="system">

      <hardware>
        <plugin>gazebo_ros2_control/GazeboSystem</plugin>
      </hardware>
      
      <!--
      <hardware>
        <xacro:if value="${use_fake_hardware}">
          <plugin>fake_components/GenericSystem</plugin>
          <param name="fake_sensor_commands">${fake_sensor_commands}</param>
          <param name="state_following_offset">0.0</param>
        </xacro:if>
        <xacro:unless value="${use_fake_hardware}">
          <plugin>ur_robot_driver/URPositionHardwareInterface</plugin>
          <param name="robot_ip">${robot_ip}</param>
          <param name="script_filename">${script_filename}</param>
          <param name="output_recipe_filename">${output_recipe_filename}</param>
          <param name="input_recipe_filename">${input_recipe_filename}</param>
          <param name="headless_mode">0</param>
          <param name="reverse_port">50001</param>
          <param name="script_sender_port">50002</param>
          <param name="tf_prefix">"${tf_prefix}"</param>
          <param name="non_blocking_read">0</param>
          <param name="servoj_gain">2000</param>
          <param name="servoj_lookahead_time">0.03</param>
          <param name="use_tool_communication">0</param>
          <param name="kinematics/hash">${hash_kinematics}</param>
          <param name="tool_voltage">0</param>
          <param name="tool_parity">0</param>
          <param name="tool_baud_rate">115200</param>
          <param name="tool_stop_bits">1</param>
          <param name="tool_rx_idle_chars">1.5</param>
          <param name="tool_tx_idle_chars">3.5</param>
          <param name="tool_device_name">/tmp/ttyUR</param>
          <param name="tool_tcp_port">54321</param>
        </xacro:unless>
      </hardware> -->

      <joint name="${prefix}shoulder_pan_joint">
        <command_interface name="position">
          <param name="min">${-2*pi}</param>
          <param name="max">${2*pi}</param>
        </command_interface>
        <command_interface name="velocity">
          <param name="min">-2.0944</param>
          <param name="max">2.0944</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
        <state_interface name="effort"/>
        <!-- <param name="initial_position">${initial_positions['shoulder_pan_joint']}</param>   initial position for the FakeSystem -->
      </joint>
      <joint name="${prefix}shoulder_lift_joint">
        <command_interface name="position">
          <param name="min">${-2*pi}</param>
          <param name="max">${2*pi}</param>
        </command_interface>
        <command_interface name="velocity">
          <param name="min">-2.0944</param>
          <param name="max">2.0944</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
        <state_interface name="effort"/>
        <!-- <param name="initial_position">${initial_positions['shoulder_lift_joint']}</param>   initial position for the FakeSystem -->
      </joint>
      <joint name="${prefix}elbow_joint">
        <command_interface name="position">
          <param name="min">${-pi}</param>
          <param name="max">${pi}</param>
        </command_interface>
        <command_interface name="velocity">
          <param name="min">-3.15</param>
          <param name="max">3.15</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
        <state_interface name="effort"/>
        <!-- <param name="initial_position">${initial_positions['elbow_joint']}</param>   initial position for the FakeSystem -->
      </joint>
      <joint name="${prefix}wrist_1_joint">
        <command_interface name="position">
          <param name="min">${-2*pi}</param>
          <param name="max">${2*pi}</param>
        </command_interface>
        <command_interface name="velocity">
          <param name="min">-3.2</param>
          <param name="max">3.2</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
        <state_interface name="effort"/>
        <!-- <param name="initial_position">${initial_positions['wrist_1_joint']}</param>   initial position for the FakeSystem -->
      </joint>
      <joint name="${prefix}wrist_2_joint">
        <command_interface name="position">
          <param name="min">${-2*pi}</param>
          <param name="max">${2*pi}</param>
        </command_interface>
        <command_interface name="velocity">
          <param name="min">-3.2</param>
          <param name="max">3.2</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
        <state_interface name="effort"/>
        <!-- <param name="initial_position">${initial_positions['wrist_2_joint']}</param>   initial position for the FakeSystem -->
      </joint>
      <joint name="${prefix}wrist_3_joint">
        <command_interface name="position">
          <param name="min">${-2*pi}</param>
          <param name="max">${2*pi}</param>
        </command_interface>
        <command_interface name="velocity">
          <param name="min">-3.2</param>
          <param name="max">3.2</param>
        </command_interface>
        <state_interface name="position"/>
        <state_interface name="velocity"/>
        <state_interface name="effort"/>
        <!-- <param name="initial_position">${initial_positions['wrist_3_joint']}</param>   initial position for the FakeSystem -->
      </joint>
      
      <!--
      <sensor name="tcp_fts_sensor">
        <state_interface name="force.x"/>
        <state_interface name="force.y"/>
        <state_interface name="force.z"/>
        <state_interface name="torque.x"/>
        <state_interface name="torque.y"/>
        <state_interface name="torque.z"/>
      </sensor> -->

    </ros2_control>

    <gazebo reference="${prefix}shoulder_link">
      <selfCollide>false</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}upper_arm_link">
      <selfCollide>false</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}forearm_link">
      <selfCollide>false</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_1_link">
      <selfCollide>false</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_3_link">
      <selfCollide>false</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}wrist_2_link">
      <selfCollide>false</selfCollide>
    </gazebo>
    <gazebo reference="${prefix}ee_link">
      <selfCollide>false</selfCollide>
    </gazebo>

  </xacro:macro>

</robot>